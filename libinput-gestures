#!/usr/bin/env python3
'Read gestures from libinput touchpad and action shell commands.'
# Mark Blakeney, Sep 2015
# Leo Mao, Apr 2016
import os, sys, argparse, subprocess, shlex, re, getpass, fcntl

PROG = os.path.basename(sys.argv[0])

# Conf file containing gesture commands
CONF = os.path.expanduser('~/.config/{}.conf'.format(PROG))

MOTIONS = ('left', 'right', 'up', 'down', 'in', 'out',
           'clockwise', 'counter-clockwise')
CMD_MAP = {}

# Set up command line arguments
opt = argparse.ArgumentParser(description=__doc__,
                              formatter_class=argparse.ArgumentDefaultsHelpFormatter)
opt.add_argument('-c', '--conffile', default=CONF,
                 help='Gestures configuration file')
opt.add_argument('-v', '--verbose', action='store_true',
                 help='Output diagnostic messages')
opt.add_argument('-d', '--debug', action='store_true',
                 help='Output diagnostic messages only, do not action gestures')
args = opt.parse_args()

if args.debug:
    args.verbose = True

def open_lock(*args):
    'Create a lock based on given list of arguments'
    # We use exclusive assess to a file for this
    fp = open(os.path.join('/tmp', '-'.join(args) + '.lock'), 'w')
    try:
        fcntl.lockf(fp, fcntl.LOCK_EX | fcntl.LOCK_NB)
    except IOError:
        return None

    return fp

def get_device():
    'Determine libinput touchpad device path'
    out = subprocess.check_output('libinput-list-devices',
                                  universal_newlines=True)

    dev = None
    for line in out.splitlines():
        line = line.strip()
        if not line or ':' not in line:
            continue

        key, value = line.split(':', maxsplit=1)
        key = key.strip()
        value = value.strip()

        # Assume that any device that has any Tap-to-click value is a
        # touchpad.
        if key == 'Kernel':
            dev = value
        elif key == 'Tap-to-click' and value != 'n/a' and dev:
            return dev

    print('Could not determine touchpad device.', file=sys.stderr)
    sys.exit(1)

class GESTURE:
    'Abstract base class for handling for gestures'
    def __init__(self):
        'Initialise this gesture at program start'
        self.name = type(self).__name__
        self.done = False

    def action(self, motion):
        'Action a motion command for this gesture'
        
        if self.done:
            return

        command = CMD_MAP.get((self.fingers, motion))
        if command:
            self.done = True

        if args.verbose:
            print('{}: {} {} {} {}'.format(PROG, self.name, motion,
                                           self.fingers, self.data))
            if command:
                print('  {}'.format(command))

        if command and not args.debug:
            subprocess.check_call(command)

class SWIPE(GESTURE):
    'Class to handle this type of gesture'
    SUPPORTED_MOTIONS = ('left', 'right', 'up', 'down')

    def check(self):
        'Check if this gesture satifies a motion sequence'
        if abs(self.data[0] - self.data[1]) >= 70:
            if abs(self.data[0]) > abs(self.data[1]):
                motion = 'left' if self.data[0] < 0 else 'right'
            else:
                motion = 'up' if self.data[1] < 0 else 'down'

            self.action(motion)

    def begin(self, fingers):
        'Initialise this gesture at the start of motion'
        self.fingers = fingers
        self.done = False
        self.data = [0.0, 0.0]

    def update(self, coords):
        'Update this gesture for a motion'
        self.data[0] += float(coords[0])
        self.data[1] += float(coords[1])
        if not self.done:
            self.check()

    def end(self, cancelled):
        pass

class PINCH(GESTURE):
    'Class to handle this type of gesture'
    SUPPORTED_MOTIONS = ('left', 'right', 'up', 'down', 'in', 'out', 'lturn', 'rturn')

    def check(self):
        'Check if this gesture satifies a motion sequence'
        if abs(self.data[3]) > 30.0:
            self.action('lturn' if self.data[3] < 0 else 'rturn')
        if self.data[2] > 1.5 or self.data[2] < 1/1.5:
            self.action('out' if self.data[2] > 1 else 'in')
        if abs(abs(self.data[0]) - abs(self.data[1])) > 70.0:
            if abs(self.data[0]) > abs(self.data[1]):
                motion = 'left' if self.data[0] < 0 else 'right'
            else:
                motion = 'up' if self.data[1] < 0 else 'down'

            self.action(motion)

    def begin(self, fingers):
        'Initialise this gesture at the start of motion'
        self.fingers = fingers
        self.done = False
        self.orig = None
        self.data = [0.0, 0.0, 0.0, 0.0]

    def update(self, coords):
        'Update this gesture for a motion'
        self.data[0] += float(coords[0])
        self.data[1] += float(coords[1])
        self.data[3] += float(coords[3])
        if not self.orig:
            self.data[2] = float(coords[2])
            self.orig = self.data[2]
        else:
            self.data[2] = float(coords[2]) / self.orig
        if not self.done:
            self.check()

    def end(self, cancelled):
        pass

# Create gesture handler instances and insert them in handler lookup
# table based on their name.
handlers = {h.name: h for h in (SWIPE(), PINCH())}

def get_conf(conffile):
    'Read configuration file'
    count = 0
    with open(conffile) as fp:
        for line in fp:
            line = line.strip()
            if not line or line[0] == '#':
                continue

            fingers, motion, command = line.split(maxsplit=2)
            if fingers.isdigit() and len(fingers) == 1 and motion in MOTIONS:
                CMD_MAP[(fingers, motion)] = shlex.split(command)
            else:
                print('Error in file {} for line:\n{}.'.format(conffile, line),
                      file=sys.stderr)
                sys.exit(1)

    return count

# Make sure only one instance running for current user
user = getpass.getuser()
proglock = open_lock(PROG, user)
if not proglock:
    print('{} is already running for {}, terminating ..'.format(PROG, user),
          file=sys.stderr)
    sys.exit(1)

# Get touchpad device
device = get_device()

# Read gestures from conf file
count = get_conf(args.conffile)

if args.verbose:
    print('{}: monitoring device {} for {} gestures'.format(PROG, device,
                                                            count))

# Note your must "sudo gpasswd -a $USER input" then log out/in for
# permission to access the device.
command = 'stdbuf -oL -- libinput-debug-events --device {}'.format(device)

cmd = subprocess.Popen(shlex.split(command), stdout=subprocess.PIPE,
                       universal_newlines=True, bufsize=0)

# Sit in a loop forever reading the libinput debug output for GESTURES ..
handler = None
for line in cmd.stdout:
    # events which are not GESTURE are usually used by the system.
    if 'GESTURE_' not in line:
        continue

    # Split debug line into relevant fields
    dev, gevent, time, other = line.strip().split(maxsplit=3)
    gesture, event = gevent.split('_')[1:]
    if ' ' in other:
        fingers, params = other.split(maxsplit=1)
        params = re.sub(r'\(.*\)', '', params)
    else:
        fingers, params = other, None

    # Action each type of event
    if event == 'UPDATE':
        if handler:
            handler.update(re.split(r'[ /@]+', params))
    elif event == 'BEGIN':
        handler = handlers.get(gesture)
        if handler:
            handler.begin(fingers)
        else:
            print('Unknown gesture received: {}'.format(gesture),
                  file=sys.stderr)
    elif event == 'END':
        # Ignore gesture if final action is cancelled
        if handler:
            handler.end(params == 'cancelled')
        handler = None
    else:
        print('Unknown gesture + event received: {}_{}'.format(gesture, event),
              file=sys.stderr)
